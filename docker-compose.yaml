
name: minify
services:
  backend:
    build: .
    ports:
      - "8000:8000"
    env_file:
      - .env
    entrypoint: ["/bin/sh", "-c"]
    working_dir: /minify/app
    command:
      - |
        python manage.py makemigrations
        python manage.py migrate
        python manage.py runserver 0.0.0.0:8000
    depends_on:
      postgres_db:
        condition: service_healthy
      redis:
        condition: service_healthy

  celery:
    build: .
    env_file:
      - .env
    entrypoint: ["/bin/sh", "-c"]
    working_dir: /minify/app
    command:
      - celery -A core worker --concurrency=1 --loglevel=info
    depends_on:
      postgres_db:
        condition: service_healthy
      redis:
        condition: service_healthy

  celery-beat:
    build: .
    env_file:
      - .env
    entrypoint: ["/bin/sh", "-c"]
    working_dir: /minify/app
    command:
      - celery -A core beat --loglevel=info
    depends_on:
      postgres_db:
        condition: service_healthy
      redis:
        condition: service_healthy

  redis:
    image: redis:7.2-alpine
    ports:
      - "6379:6379"
    volumes:
      - ./backup/redis:/data
    healthcheck:
      test: [ "CMD-SHELL", "redis-cli ping" ]
      interval: 5s
      timeout: 30s
      retries: 6
    restart: always

  postgres_db:
    image: postgres:15-alpine
    ports:
      - "5432:5432"
    env_file:
      - .env
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}

    volumes:
      - ./backup/postgresql:/var/lib/postgresql/data

    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 5s
      timeout: 30s
      retries: 6
    restart: always

  tests:
    build: .
    profiles:
      - tests
    env_file:
      - .env
    entrypoint: ["/bin/sh", "-c"]
    working_dir: /minify/app
    command:
      - |
        python manage.py migrate 
        pytest -s -v --disable-warnings
    depends_on:
      postgres_db:
        condition: service_healthy
      redis:
        condition: service_healthy
